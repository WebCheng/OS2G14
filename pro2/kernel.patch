diff --git a/linux-yocto-3.19/block/Kconfig.iosched b/linux-yocto-3.19/block/Kconfig.iosched
index 421bef9..24b5802 100644
--- a/linux-yocto-3.19/block/Kconfig.iosched
+++ b/linux-yocto-3.19/block/Kconfig.iosched
@@ -32,6 +32,13 @@ config IOSCHED_CFQ
 
 	  This is the default I/O scheduler.
 
+config IOSCHED_SSTF
+    tristate "SSTF"
+    default y
+    ---help---
+        The SSTF I/O scheduler
+
+
 config CFQ_GROUP_IOSCHED
 	bool "CFQ Group Scheduling support"
 	depends on IOSCHED_CFQ && BLK_CGROUP
@@ -55,6 +62,9 @@ choice
 	config DEFAULT_NOOP
 		bool "No-op"
 
+    config DEFAULT_SSTF
+        bool "SSTF" if IOSCHED_SSTF=y
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -62,6 +72,7 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "cfq" if DEFAULT_CFQ
 	default "noop" if DEFAULT_NOOP
+    default "sstf" if DEFAULT_SSTF
 
 endmenu
 
diff --git a/linux-yocto-3.19/block/Makefile b/linux-yocto-3.19/block/Makefile
index 00ecc97..47677ca 100644
--- a/linux-yocto-3.19/block/Makefile
+++ b/linux-yocto-3.19/block/Makefile
@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_BSGLIB)	+= bsg-lib.o
 obj-$(CONFIG_BLK_CGROUP)	+= blk-cgroup.o
 obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
 obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
+obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
 
diff --git a/linux-yocto-3.19/block/sstf-iosched.c b/linux-yocto-3.19/block/sstf-iosched.c
new file mode 100644
index 0000000..3670c5b
--- /dev/null
+++ b/linux-yocto-3.19/block/sstf-iosched.c
@@ -0,0 +1,150 @@
+/*
+ * elevator sstf
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+unsigned long long currSector = -1;
+struct sstf_data
+{
+	struct list_head queue;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+								 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue))
+	{ 
+		printk(KERN_DEBUG "============================================<Start\n");
+		struct list_head *cur = NULL;
+		struct request *rp_next = NULL;
+		list_for_each(cur, &nd->queue)
+		{
+			struct request *c = list_entry(cur, struct request, queuelist);
+			printk(KERN_DEBUG "%llu.\n", (unsigned long long)blk_rq_pos(c));
+
+			if (rp_next == NULL)
+				rp_next = c;
+			if (blk_rq_pos(c) <= currSector)
+			{
+				if (blk_rq_pos(rp_next) < blk_rq_pos(c))
+					rp_next = c;
+			}
+			else
+			{
+				if (blk_rq_pos(rp_next) > blk_rq_pos(c) && blk_rq_pos(rp_next) > currSector)
+					rp_next = c;
+			}
+		}
+		printk(KERN_DEBUG "Next request position: %llu   CURR position: %llu.\n", (unsigned long long)blk_rq_pos(rp_next), currSector);
+		printk(KERN_DEBUG "============================================<End\n");
+
+		list_del_init(&rp_next->queuelist);
+		elv_dispatch_sort(q, rp_next);
+		currSector = blk_rq_pos(rp_next);
+
+		return 1;
+	}
+	return 0;
+}
+
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+	list_add_tail(&rq->queuelist, &nd->queue);
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd)
+	{
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn = sstf_merged_requests,
+		.elevator_dispatch_fn = sstf_dispatch,
+		.elevator_add_req_fn = sstf_add_request,
+		.elevator_former_req_fn = sstf_former_request,
+		.elevator_latter_req_fn = sstf_latter_request,
+		.elevator_init_fn = sstf_init_queue,
+		.elevator_exit_fn = sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+MODULE_AUTHOR("Jens Axboe");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("SSFT IO scheduler");
diff --git a/pro2/kernel.patch b/pro2/kernel.patch
new file mode 100644
index 0000000..7bb9c95
--- /dev/null
+++ b/pro2/kernel.patch
@@ -0,0 +1,204 @@
+diff --git a/linux-yocto-3.19/block/Kconfig.iosched b/linux-yocto-3.19/block/Kconfig.iosched
+index 421bef9..24b5802 100644
+--- a/linux-yocto-3.19/block/Kconfig.iosched
++++ b/linux-yocto-3.19/block/Kconfig.iosched
+@@ -32,6 +32,13 @@ config IOSCHED_CFQ
+ 
+ 	  This is the default I/O scheduler.
+ 
++config IOSCHED_SSTF
++    tristate "SSTF"
++    default y
++    ---help---
++        The SSTF I/O scheduler
++
++
+ config CFQ_GROUP_IOSCHED
+ 	bool "CFQ Group Scheduling support"
+ 	depends on IOSCHED_CFQ && BLK_CGROUP
+@@ -55,6 +62,9 @@ choice
+ 	config DEFAULT_NOOP
+ 		bool "No-op"
+ 
++    config DEFAULT_SSTF
++        bool "SSTF" if IOSCHED_SSTF=y
++
+ endchoice
+ 
+ config DEFAULT_IOSCHED
+@@ -62,6 +72,7 @@ config DEFAULT_IOSCHED
+ 	default "deadline" if DEFAULT_DEADLINE
+ 	default "cfq" if DEFAULT_CFQ
+ 	default "noop" if DEFAULT_NOOP
++    default "sstf" if DEFAULT_SSTF
+ 
+ endmenu
+ 
+diff --git a/linux-yocto-3.19/block/Makefile b/linux-yocto-3.19/block/Makefile
+index 00ecc97..47677ca 100644
+--- a/linux-yocto-3.19/block/Makefile
++++ b/linux-yocto-3.19/block/Makefile
+@@ -16,6 +16,7 @@ obj-$(CONFIG_BLK_DEV_BSGLIB)	+= bsg-lib.o
+ obj-$(CONFIG_BLK_CGROUP)	+= blk-cgroup.o
+ obj-$(CONFIG_BLK_DEV_THROTTLING)	+= blk-throttle.o
+ obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
++obj-$(CONFIG_IOSCHED_SSTF)	+= sstf-iosched.o
+ obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
+ obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+ 
+diff --git a/linux-yocto-3.19/block/sstf-iosched.c b/linux-yocto-3.19/block/sstf-iosched.c
+new file mode 100644
+index 0000000..dd0f897
+--- /dev/null
++++ b/linux-yocto-3.19/block/sstf-iosched.c
+@@ -0,0 +1,150 @@
++/*
++ * elevator sstf
++ */
++#include <linux/blkdev.h>
++#include <linux/elevator.h>
++#include <linux/bio.h>
++#include <linux/module.h>
++#include <linux/slab.h>
++#include <linux/init.h>
++
++unsigned long long currSector = -1;
++struct sstf_data
++{
++	struct list_head queue;
++};
++
++static void sstf_merged_requests(struct request_queue *q, struct request *rq,
++								 struct request *next)
++{
++	list_del_init(&next->queuelist);
++}
++
++static int sstf_dispatch(struct request_queue *q, int force)
++{
++	struct sstf_data *nd = q->elevator->elevator_data;
++
++	if (!list_empty(&nd->queue))
++	{ 
++		printk(KERN_DEBUG "============================================<Start\n");
++		struct list_head *cur = NULL;
++		struct request *rp_next = NULL;
++		list_for_each(cur, &nd->queue)
++		{
++			struct request *c = list_entry(cur, struct request, queuelist);
++			printk(KERN_DEBUG "%llu.\n", (unsigned long long)blk_rq_pos(c));
++
++			if (rp_next == NULL)
++				rp_next = c;
++			if (blk_rq_pos(c) <= currSector)
++			{
++				if (blk_rq_pos(rp_next) < blk_rq_pos(c))
++					rp_next = c;
++			}
++			else
++			{
++				if (blk_rq_pos(rp_next) > blk_rq_pos(c))
++					rp_next = c;
++			}
++		}
++		printk(KERN_DEBUG "Next request position: %llu   CURR position: %llu.\n", (unsigned long long)blk_rq_pos(rp_next), currSector);
++		printk(KERN_DEBUG "============================================<End\n");
++
++		list_del_init(&rp_next->queuelist);
++		elv_dispatch_sort(q, rp_next);
++		currSector = blk_rq_pos(rp_next);
++
++		return 1;
++	}
++	return 0;
++}
++
++static void sstf_add_request(struct request_queue *q, struct request *rq)
++{
++	struct sstf_data *nd = q->elevator->elevator_data;
++	list_add_tail(&rq->queuelist, &nd->queue);
++}
++
++static struct request *
++sstf_former_request(struct request_queue *q, struct request *rq)
++{
++	struct sstf_data *nd = q->elevator->elevator_data;
++
++	if (rq->queuelist.prev == &nd->queue)
++		return NULL;
++	return list_entry(rq->queuelist.prev, struct request, queuelist);
++}
++
++static struct request *
++sstf_latter_request(struct request_queue *q, struct request *rq)
++{
++	struct sstf_data *nd = q->elevator->elevator_data;
++
++	if (rq->queuelist.next == &nd->queue)
++		return NULL;
++	return list_entry(rq->queuelist.next, struct request, queuelist);
++}
++
++static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
++{
++	struct sstf_data *nd;
++	struct elevator_queue *eq;
++
++	eq = elevator_alloc(q, e);
++	if (!eq)
++		return -ENOMEM;
++
++	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
++	if (!nd)
++	{
++		kobject_put(&eq->kobj);
++		return -ENOMEM;
++	}
++	eq->elevator_data = nd;
++
++	INIT_LIST_HEAD(&nd->queue);
++
++	spin_lock_irq(q->queue_lock);
++	q->elevator = eq;
++	spin_unlock_irq(q->queue_lock);
++	return 0;
++}
++
++static void sstf_exit_queue(struct elevator_queue *e)
++{
++	struct sstf_data *nd = e->elevator_data;
++
++	BUG_ON(!list_empty(&nd->queue));
++	kfree(nd);
++}
++
++static struct elevator_type elevator_sstf = {
++	.ops = {
++		.elevator_merge_req_fn = sstf_merged_requests,
++		.elevator_dispatch_fn = sstf_dispatch,
++		.elevator_add_req_fn = sstf_add_request,
++		.elevator_former_req_fn = sstf_former_request,
++		.elevator_latter_req_fn = sstf_latter_request,
++		.elevator_init_fn = sstf_init_queue,
++		.elevator_exit_fn = sstf_exit_queue,
++	},
++	.elevator_name = "sstf",
++	.elevator_owner = THIS_MODULE,
++};
++
++static int __init sstf_init(void)
++{
++	return elv_register(&elevator_sstf);
++}
++
++static void __exit sstf_exit(void)
++{
++	elv_unregister(&elevator_sstf);
++}
++
++module_init(sstf_init);
++module_exit(sstf_exit);
++
++MODULE_AUTHOR("Jens Axboe");
++MODULE_LICENSE("GPL");
++MODULE_DESCRIPTION("SSFT IO scheduler");
diff --git a/pro2/sstf-iosched.c b/pro2/sstf-iosched.c
new file mode 100644
index 0000000..dd0f897
--- /dev/null
+++ b/pro2/sstf-iosched.c
@@ -0,0 +1,150 @@
+/*
+ * elevator sstf
+ */
+#include <linux/blkdev.h>
+#include <linux/elevator.h>
+#include <linux/bio.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/init.h>
+
+unsigned long long currSector = -1;
+struct sstf_data
+{
+	struct list_head queue;
+};
+
+static void sstf_merged_requests(struct request_queue *q, struct request *rq,
+								 struct request *next)
+{
+	list_del_init(&next->queuelist);
+}
+
+static int sstf_dispatch(struct request_queue *q, int force)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (!list_empty(&nd->queue))
+	{ 
+		printk(KERN_DEBUG "============================================<Start\n");
+		struct list_head *cur = NULL;
+		struct request *rp_next = NULL;
+		list_for_each(cur, &nd->queue)
+		{
+			struct request *c = list_entry(cur, struct request, queuelist);
+			printk(KERN_DEBUG "%llu.\n", (unsigned long long)blk_rq_pos(c));
+
+			if (rp_next == NULL)
+				rp_next = c;
+			if (blk_rq_pos(c) <= currSector)
+			{
+				if (blk_rq_pos(rp_next) < blk_rq_pos(c))
+					rp_next = c;
+			}
+			else
+			{
+				if (blk_rq_pos(rp_next) > blk_rq_pos(c))
+					rp_next = c;
+			}
+		}
+		printk(KERN_DEBUG "Next request position: %llu   CURR position: %llu.\n", (unsigned long long)blk_rq_pos(rp_next), currSector);
+		printk(KERN_DEBUG "============================================<End\n");
+
+		list_del_init(&rp_next->queuelist);
+		elv_dispatch_sort(q, rp_next);
+		currSector = blk_rq_pos(rp_next);
+
+		return 1;
+	}
+	return 0;
+}
+
+static void sstf_add_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+	list_add_tail(&rq->queuelist, &nd->queue);
+}
+
+static struct request *
+sstf_former_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.prev == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.prev, struct request, queuelist);
+}
+
+static struct request *
+sstf_latter_request(struct request_queue *q, struct request *rq)
+{
+	struct sstf_data *nd = q->elevator->elevator_data;
+
+	if (rq->queuelist.next == &nd->queue)
+		return NULL;
+	return list_entry(rq->queuelist.next, struct request, queuelist);
+}
+
+static int sstf_init_queue(struct request_queue *q, struct elevator_type *e)
+{
+	struct sstf_data *nd;
+	struct elevator_queue *eq;
+
+	eq = elevator_alloc(q, e);
+	if (!eq)
+		return -ENOMEM;
+
+	nd = kmalloc_node(sizeof(*nd), GFP_KERNEL, q->node);
+	if (!nd)
+	{
+		kobject_put(&eq->kobj);
+		return -ENOMEM;
+	}
+	eq->elevator_data = nd;
+
+	INIT_LIST_HEAD(&nd->queue);
+
+	spin_lock_irq(q->queue_lock);
+	q->elevator = eq;
+	spin_unlock_irq(q->queue_lock);
+	return 0;
+}
+
+static void sstf_exit_queue(struct elevator_queue *e)
+{
+	struct sstf_data *nd = e->elevator_data;
+
+	BUG_ON(!list_empty(&nd->queue));
+	kfree(nd);
+}
+
+static struct elevator_type elevator_sstf = {
+	.ops = {
+		.elevator_merge_req_fn = sstf_merged_requests,
+		.elevator_dispatch_fn = sstf_dispatch,
+		.elevator_add_req_fn = sstf_add_request,
+		.elevator_former_req_fn = sstf_former_request,
+		.elevator_latter_req_fn = sstf_latter_request,
+		.elevator_init_fn = sstf_init_queue,
+		.elevator_exit_fn = sstf_exit_queue,
+	},
+	.elevator_name = "sstf",
+	.elevator_owner = THIS_MODULE,
+};
+
+static int __init sstf_init(void)
+{
+	return elv_register(&elevator_sstf);
+}
+
+static void __exit sstf_exit(void)
+{
+	elv_unregister(&elevator_sstf);
+}
+
+module_init(sstf_init);
+module_exit(sstf_exit);
+
+MODULE_AUTHOR("Jens Axboe");
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("SSFT IO scheduler");
